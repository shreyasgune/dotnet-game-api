# Example custom values.yaml for kube-prometheus-stack

crds:
  enabled: false

prometheus:
  service:
    type: LoadBalancer
  enabled: true
  thanosService:
    enabled: true
  thanosServiceMonitor:
    enabled: true
  replicas: 1
  namespace: monitoring
  serviceMonitorSelector: {} #match all svc monitors
  podMonitorSelector: {} #match all pod monitors
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    additionalScrapeConfigs:
      - job_name: "argocd-argocd-server"
        metrics_path: "/metrics"
        scrape_interval: 30s
        scrape_timeout: 30s
        static_configs:
          - targets: ["argo-cd-argocd-server-metrics.argocd.svc.cluster.local:8083"]

      - job_name: "argocd-argocd-applicationset-controller"
        metrics_path: "/metrics"
        scrape_interval: 30s
        scrape_timeout: 30s
        static_configs:
          - targets: ["argo-cd-argocd-applicationset-controller-metrics.argocd.svc.cluster.local:8085"]

      - job_name: "argocd-argocd-notifications-controller"
        metrics_path: "/metrics"
        scrape_interval: 30s
        scrape_timeout: 30s
        static_configs:
          - targets: ["argo-cd-argocd-notifications-controller-metrics.argocd.svc.cluster.local:9001"]

      - job_name: "argocd-argocd-redis"
        metrics_path: "/metrics"
        scrape_interval: 30s
        scrape_timeout: 30s
        static_configs:
          - targets: ["argo-cd-argocd-redis-metrics.argocd.svc.cluster.local:9121"]

      - job_name: "argocd-argocd-repo-server"
        metrics_path: "/metrics"
        scrape_interval: 30s
        scrape_timeout: 30s
        static_configs:
          - targets: ["argo-cd-argocd-repo-server-metrics.argocd.svc.cluster.local:8084"]

# prometheus:
#   service:
#     type: LoadBalancer
#   enabled: true
#   thanosService:
#     enabled: true
#   thanosServiceMonitor:
#     enabled: true
#   replicas: 1
#   namespace: monitoring
#   serviceMonitorSelector: {} #match all svc monitors
#   podMonitorSelector: {} #match all pod monitors
#   prometheusSpec:
#     serviceMonitorSelectorNilUsesHelmValues: false
#     podMonitorSelectorNilUsesHelmValues: false
#     additionalScrapeConfigs:
#       - job_name: "argocd-argocd-server"
#         metrics_path: "/metrics"
#         scrape_interval: 30s
#         scrape_timeout: 90s
#         static_configs:
#           - targets: ["argo-cd-argocd-server-metrics.argocd.svc.cluster.local:8083"]

#       - job_name: "argocd-argocd-applicationset-controller"
#         metrics_path: "/metrics"
#         scrape_interval: 30s
#         scrape_timeout: 90s
#         static_configs:
#           - targets: ["argo-cd-argocd-applicationset-controller-metrics.argocd.svc.cluster.local:8085"]

#       - job_name: "argocd-argocd-notifications-controller"
#         metrics_path: "/metrics"
#         scrape_interval: 30s
#         scrape_timeout: 90s
#         static_configs:
#           - targets: ["argo-cd-argocd-notifications-controller-metrics.argocd.svc.cluster.local:9001"]

#       - job_name: "argocd-argocd-redis"
#         metrics_path: "/metrics"
#         scrape_interval: 30s
#         scrape_timeout: 90s
#         static_configs:
#           - targets: ["argo-cd-argocd-redis-metrics.argocd.svc.cluster.local:9121"]

#       - job_name: "argocd-argocd-repo-server"
#         metrics_path: "/metrics"
#         scrape_interval: 30s
#         scrape_timeout: 90s
#         static_configs:
#           - targets: ["argo-cd-argocd-repo-server-metrics.argocd.svc.cluster.local:8084"]


grafana:
  service:
    enabled: true
    type: LoadBalancer
  enabled: true
  adminPassword: "admin"  # Set your desired password here
  additionalDatasources:
    - name: Loki
      type: loki
      url:  http://loki.logging.svc.cluster.local:3100
      access: proxy
      isDefault: true
  resources:
    requests:
      memory: "64Mi"  # Minimum memory request
      cpu: "100m"     # Adjust CPU request as needed
    limits:
      memory: "100Mi"  # Set memory limit to 100Mi
      cpu: "200m"      # Set CPU limit to avoid excessive usage 

prometheusOperator:
  admissionWebhooks:
    annotations:
        argocd.argoproj.io/hook: PreSync
        argocd.argoproj.io/hook-delete-policy: HookSucceeded
    mutatingWebhookConfiguration:
      annotations:
        argocd.argoproj.io/hook: PreSync
    validatingWebhookConfiguration:
      annotations:
        argocd.argoproj.io/hook: PreSync

alertmanager:
  enabled: false
  service:
    enabled: true
    type: ClusterIP
  alertmanagerSpec:
    replicas: 1


kubeScheduler:
  enabled: false
kubeControllerManager:
  enabled: false

